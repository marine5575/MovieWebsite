[3.0 Understanding State]
state: 바뀌는 data가 저장되는 곳
comp를 다시 렌더링해야만 UI가 갱신됨
값을 바꿀 때마다 렌더링하는 것을 잊으면 안 됨
☆ReactJS는 UI에서 바뀐 부분만 업데이트함☆
<- 이전에 렌더링된 comp가 무엇인지 파악하고 변경된 부분만 갱신

기존 JS: 노드 정보가 바뀔 때마다 노드 트리를 처음부터 다시 생성(5단계)
ReactJS: 가상 DOM을 써서 우리 시야에 보이는 부분만 수정해서 보여주고, 모든 update가 끝나면 일괄로 합쳐서 실제 DOM에 던져줌

[3.1 setState part One]
React.useState() => [data, data를 바꿀 수 있는 함수]
배열 요소에 이름 붙일 땐 구조분해할당 (e.g., const food = ["tomato", "potato"]; const [myFav, secondFav] = food;)

[3.2 setState part Two]
modifier(VALUE) -> VALUE 값으로 갱신하고 다시 렌더링해줌
object를 const 로 지정할 경우 주소가 참조 => 해당 객체 내의 값은 변경해도 ok
재할당이 필요한 변수가 아니라면 const를 사용하는 것이 안전 <- const는 항상 같은 객체를 가리키고 있기 때문

[3.3 Recap]
setCounter()을 가지고 state를 변경하면 변경된 값을 가지고 다시 렌더링됨 (comp 재생성 후 실행)
data가 바뀔 때마다 comp를 다시 렌더링하고 UI 변경

[3.4 State Functions]
이전 단계의 state를 사용해서 현재 state를 바꾸려고 할 때 우리가 원하는 값으로 변하지 않을 수도 있음

state 세팅의 2가지 방법
1. 값을 직접 할당: setState를 이용하여 값을 변경
2. 함수 할당: 이전 값을 바탕으로 현재 값을 변경하고 싶다면 callback fn를 활용! => 현재 계산하고 있는 값이 이전값이라는 것을 보증
e.g., setCounter((prevCounter) => prevCounter + 1);

[3.5 Inputs and State]
<label></label>: input 옆에 자리하는 태그
JSX에서는 for, class 같은 attribute 이름을 사용할 수 x
대신 htmlFor, className를 사용
ReactJS는 event를 최적화해서 발생시키기 때문에 SyntheticBaseEvent 발생

[3.6 State Practice part One]
input의 value를 state와 연결시켜주는 이유는 input값을 외부에서도 수정하기 위함

[3.9 Final Practice and Recap]
comp 안에 comp를 넣는 것 가능  e.g., <MinutesToHours />

다시 렌더링되는 조건
1. props이 바뀔때
2. state가 바뀔때
3. 부모 컴포넌트가 리렌더링 될 때